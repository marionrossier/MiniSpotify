@startuml
interface "common/repository.IUserRepository" {
~ Optional<User> authenticate(String,String)
~ User getUserByPseudonym(String)
~ List<User> getAllUsers()
~ void updateOrInsertUser(User)
~ User getUserById(int)
}

interface "common/repository.ISongRepository" {
~ ArrayList<Song> getAllSongs()
~ void addSong(Song)
~ Song getSongById(int)
~ LinkedList<Song> getSongsByTitle(String)
~ LinkedList<Song> getSongsByArtist(String)
~ LinkedList<Song> getSongsByGender(MusicGender)
}

interface common/repository.IPlaylistRepository {
~ List<Playlist> getAllPlaylists()
~ void updateOrInsertPlaylist(Playlist)
~ void deletePlaylistById(int)
~ Playlist getPlaylistById(int)
~ Playlist getPlaylistByName(String)
~ PlaylistEnum getPlaylistStatus(Playlist)
~ Playlist getTemporaryPlaylistOfCurrentUser(int)
}

interface common/repository.IAudioRepository {
~ InputStream getStream(String)
}

interface common/repository.IArtistRepository {
~ List<Artist> getAllArtists()
~ void addArtist(Artist)
~ Artist getArtistById(int)
~ void updateOrInsertArtist(Artist)
~ Artist getArtistByName(String)
~ Artist getArtistBySongId(int)
}

class clientSide/services.SongService {
- ISongRepository songRepository
+ <<Create>> SongService(ToolBoxService)
+ void setCurrentSongId(int)
+ int getCurrentSongId()
+ Song getSongById(int)
+ LinkedList<Song> getSongByTitle(String)
+ LinkedList<Song> getSongsByArtist(String)
+ LinkedList<Song> getSongsByGender(MusicGender)
}

class "clientSide/services.playlist.PlaylistFunctionalitiesService" {
- UserService userService
- SongService songService
+ <<Create>> PlaylistFunctionalitiesService(UserService,SongService)
+ void createNewPlaylist(String,PlaylistEnum,PlaylistServices)
+ void createAllSongPlaylist(User,PlaylistServices, IUserRepository)
+ void removePlaylistFromUser(int, IUserRepository)
+ void deletePlaylist(int, IPlaylistRepository, IUserRepository)
+ void renamePlayList(int,String, IPlaylistRepository)
+ boolean verifyPlaylistName(String,User, IPlaylistRepository)
+ void deleteSongFromPlaylist(int,int, IPlaylistRepository)
+ boolean isCurrentUserOwnerOfPlaylist(int, IPlaylistRepository)
+ int takeAndValidateInputChoice(int,PageService)
+ void playlistPageRouter(int,PlaylistServices,PageService,
IPlaylistRepository)
}

class "clientSide/services.AuthentificationService" {
    - socketClient : SocketClient
    --
    + AuthentificationService(socketClient: SocketClient)
    + login(pseudonym: String, password: String) : boolean
    + logout() : void
}

class "clientSide/services.playlist.PlaylistReorderSongService" {
+ <<Create>> PlaylistReorderSongService()
+ void reorderSongsInPlaylist(int,PlaylistServices,Scanner,
IPlaylistRepository)
- LinkedList<Integer> collectNewOrderFromUser(Playlist)
- boolean isValidIndex(int,Playlist)
- void completeWithRemainingSongs(Playlist,List<Integer>)
}

class "clientSide/services.PrintService" {
- UserService userService
- PlaylistServices playlistService
- SongService songService
- ArtistService artistService
+ <<Create>> PrintService(SongService,ArtistService,PlaylistServices,UserService)
+ void printSongList(List<Integer>)
+ void printPlaylist(List<Integer>)
+ String printSong (Song)
+ String printPlaylist (Playlist)
+ String getStringDuration(int)
+ void printUserPlaylists(int)
- String printPlaylistStatus(PlaylistEnum)
+ boolean printUserFriends(int)
+ void printUsers(List<Integer>)
+ void printUserPublicPlaylists(int)
}

class "clientSide/services.ArtistService" {
- IArtistRepository artistRepository
+ <<Create>> ArtistService(ToolBoxService)
+ String getArtistNameBySong(int)
}

class "clientSide/services.PlaylistServices" {
- IPlaylistRepository playlistRepository
- TemporaryPlaylistService temporaryPlaylistService
- PlaylistFunctionalitiesService playlistFuncService
- PlaylistReorderSongService playlistReorderSongService
- ISongRepository songRepository
+ <<Create>> PlaylistServices(ToolBoxService,PlaylistFunctionalitiesService,
TemporaryPlaylistService, PlaylistReorderSongService)
+ int setDurationSeconds(int)
+ void setCurrentPlaylistId(int)
+ int getCurrentPlaylistId()
+ PlaylistEnum getPlaylistStatus()
+ int getAllSongsPlaylistId()
+ Playlist getPlaylistByName(String)
+ Playlist getPlaylistById(int)
+ List<Integer> getPublicPlaylists()
+ List<Integer> getUserPublicPlaylists(User)
+ int getCurrentFriendPlaylistId()
+ void setCurrentFriendPlaylistId(int)
+ void createNewPlaylist(String,PlaylistEnum)
+ void createAllSongPlaylist(User)
+ void deletePlaylist(int)
+ void renamePlayList(int,String)
+ boolean verifyPlaylistName(String,User)
+ void deleteSongFromPlaylist(int,int)
+ boolean isCurrentUserOwnerOfPlaylist(int)
+ int takeAndValidateInputChoice(int,PageService)
+ void playlistPageRouter(int,PageService)
+ int getTemporaryPlaylistId()
+ void createTemporaryPlaylist(LinkedList<Integer>,PlaylistEnum)
+ void adjustTemporaryPlaylistToNewPlaylist(String,PlaylistEnum)
+ void addSongToPlaylistFromTemporaryPlaylist(int,int)
+ void getAndAddSelectionOfPlaylistsToCurrentUserPlaylists
(List<Integer>,LinkedList<Integer>,ToolBoxView)
+ void reorderSongsInPlaylist(int,PlaylistServices,Scanner, IPlaylistRepository)
}

class clientSide/services.SearchService {
~ Scanner scanner
- SongService songService
- PrintService printService
- UserService userService
+ <<Create>> SearchService(SongService,PrintService,UserService)
+ void searchSong(String,String,int,PageService,PlaylistServices)
+ LinkedList<Integer> searchByTitle(String)
- LinkedList<Integer> searchByArtist(String)
- LinkedList<Integer> searchByGender(MusicGender)
- LinkedList<Integer> listSongToListInt(LinkedList<Song>)
+ LinkedList<Integer> chooseFoundedSongs(List<Integer>,PageService)
+ LinkedList<Integer> chooseFoundedPlaylist(List<Integer>,PageService)
- void loopIntInputValidation(PageService,LinkedList<Integer>,int)
+ List<Integer> searchUserByPseudonym(String)
}

class clientSide/services.UserService {
- IUserRepository userRepository
- PasswordGenerator passwordGenerator
+ <<Create>> UserService(ToolBoxService,PasswordGenerator)
+ void addUser(String,String,String,PlanEnum)
+ void addUser(int,String,String,String,PlanEnum)
+ boolean emailValidation(String)
+ void addOnePlaylistToCurrentUser(int)
+ void addFriend(int)
+ void deleteFriend(int)
+ void saveUser(User)
+ int getCurrentUserId()
+ void resetCookie()
+ User getUserByPseudonym(String)
+ List<Integer> getUsersByPseudonym(String)
+ User getUserById(int)
+ void setCurrentFriendId(int)
+ int getCurrentFriendId()
}

class "clientSide/services.ToolBoxService" {
}

class "clientSide/services.playlist.TemporaryPlaylistService" {
- UserService userService
+ <<Create>> TemporaryPlaylistService(UserService)
+ int getTemporaryPlaylistId(IPlaylistRepository)
+ void createTemporaryPlaylist(LinkedList<Integer>,PlaylistEnum,
IPlaylistRepository)
+ void adjustTemporaryPlaylistToNewPlaylist(String,PlaylistEnum,
IPlaylistRepository)
+ void addSongToPlaylistFromTemporaryPlaylist(int,int,
IPlaylistRepository)
}

class "clientSide/services.PasswordGenerator" {
- IUserRepository userRepository
+ <<Create>> PasswordGenerator(IUserRepository)
+ byte[] generateSalt()
+ String hashPassword(String,byte[])
}

class clientSide/services.PageService {
~ ArrayList<InterfaceMenu> pages
- Scanner scanner
- Stack<Integer> menuPagesStack
- IPlaylistPlayer spotifyPlayer
+ Login login
+ CreateAccount createAccount
+ HomePage homePage
+ PlaylistHomePage playlistHomePage
+ PlaylistChoseList playlistChoseList
+ PlaylistPageShared playlistPageShared
+ PlaylistPageOpen playlistPageOpen
+ PlaylistCreation playlistCreation
+ PlaylistDeletion playlistDeletion
+ Search search
+ ActionFoundedSongs actionFoundedSongs
+ SearchGender searchGender
+ FriendsPlaylistPage friendsPlaylistPage
+ FriendsDisplayFriends friendsDisplayFriends
+ FriendsHomePage friendsHomePage
+ FriendSearch friendSearch
+ FriendPlaylists friendPlaylists
+ FriendOptions friendOptions
+ SongPlayer songPlayer
- UserService userService
- ToolBoxView toolBoxView
+ <<Create>> PageService(IPlaylistPlayer,ToolBoxView,UserService,
Stack<Integer>)
- void setUpPages()
+ void startLogin()
+ String gotAnInputGoBackIf0(String)
+ int tryParseInt(String)
+ Stack<Integer> getMenuPages()
+ void addToStack(int)
+ void goBack(int)
+ InterfaceMenu getPageById(int)
+ void pageIsPremium(boolean)
}

class clientSide/views.ViewsClasses {}
class clientSide/services.ToolBoxView {
}


' --- Dépendances générées ---

"clientSide/services.AuthentificationService" -u-> "clientSide/socket.SocketClient"

"clientSide/services.SongService" -u-> "clientSide/services.ToolBoxService"

"clientSide/services.playlist.PlaylistFunctionalitiesService" -u-> "clientSide/services.UserService"
"clientSide/services.playlist.PlaylistFunctionalitiesService" -u-> "clientSide/services.SongService"

"clientSide/services.PrintService" -u-> "clientSide/services.SongService"
"clientSide/services.PrintService" -u-> "clientSide/services.ArtistService"
"clientSide/services.PrintService" -r-> "clientSide/services.PlaylistServices"
"clientSide/services.PrintService" -u-> "clientSide/services.UserService"

"clientSide/services.ArtistService" -u-> "clientSide/services.ToolBoxService"

"clientSide/services.PlaylistServices" -u-> "clientSide/services.ToolBoxService"
"clientSide/services.PlaylistServices" -u-> "clientSide/services.playlist.PlaylistFunctionalitiesService"
"clientSide/services.PlaylistServices" -u-> "clientSide/services.playlist.TemporaryPlaylistService"
"clientSide/services.PlaylistServices" -u-> "clientSide/services.playlist.PlaylistReorderSongService"

"clientSide/services.SearchService" -u-> "clientSide/services.SongService"
"clientSide/services.SearchService" -u-> "clientSide/services.PrintService"
"clientSide/services.SearchService" -u--> "clientSide/services.UserService"

"clientSide/services.UserService" -u-> "clientSide/services.ToolBoxService"
"clientSide/services.UserService" -u-> "clientSide/services.PasswordGenerator"

"clientSide/services.playlist.TemporaryPlaylistService" -u-> "clientSide/services.UserService"

"clientSide/services.ToolBoxService" -u-> "common/repository.IUserRepository"
"clientSide/services.ToolBoxService" -u-> "common/repository.ISongRepository"
"clientSide/services.ToolBoxService" -u-> "common/repository.IPlaylistRepository"
"clientSide/services.ToolBoxService" -u-> "common/repository.IAudioRepository"
"clientSide/services.ToolBoxService" -u-> "common/repository.IArtistRepository"


"clientSide/services.PageService" -u-> "clientSide/services.UserService"

"clientSide/services.ToolBoxView" -u-> "clientSide/services.PlaylistServices"
"clientSide/services.ToolBoxView" -u-> "clientSide/services.SongService"
"clientSide/services.ToolBoxView" -u-> "clientSide/services.SearchService"
"clientSide/services.ToolBoxView" -u-> "clientSide/services.UserService"
"clientSide/services.ToolBoxView" -u-> "clientSide/services.PrintService"
"clientSide/services.ToolBoxView" -u-> "clientSide/services.PasswordGenerator"
"clientSide/services.ToolBoxView" -u-> "clientSide/services.ArtistService"
"clientSide/services.ToolBoxView" -u-> "clientSide/services.AuthentificationService"

"clientSide/views.ViewsClasses" -u-> "clientSide/services.ToolBoxView"
"clientSide/services.ToolBoxView" -l-> "common/services.UniqueIdService"
"clientSide/services.PageService" -u-> "clientSide/services.ToolBoxView"

@enduml